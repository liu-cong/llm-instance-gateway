/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// InferencePoolSpecApplyConfiguration represents a declarative configuration of the InferencePoolSpec type for use
// with apply.
type InferencePoolSpecApplyConfiguration struct {
	ModelServerSelector map[string]string `json:"modelServerSelector,omitempty"`
	TargetPort          *int32            `json:"targetPort,omitempty"`
}

// InferencePoolSpecApplyConfiguration constructs a declarative configuration of the InferencePoolSpec type for use with
// apply.
func InferencePoolSpec() *InferencePoolSpecApplyConfiguration {
	return &InferencePoolSpecApplyConfiguration{}
}

// WithModelServerSelector puts the entries into the ModelServerSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ModelServerSelector field,
// overwriting an existing map entries in ModelServerSelector field with the same key.
func (b *InferencePoolSpecApplyConfiguration) WithModelServerSelector(entries map[string]string) *InferencePoolSpecApplyConfiguration {
	if b.ModelServerSelector == nil && len(entries) > 0 {
		b.ModelServerSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ModelServerSelector[k] = v
	}
	return b
}

// WithTargetPort sets the TargetPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetPort field is set to the value of the last call.
func (b *InferencePoolSpecApplyConfiguration) WithTargetPort(value int32) *InferencePoolSpecApplyConfiguration {
	b.TargetPort = &value
	return b
}
